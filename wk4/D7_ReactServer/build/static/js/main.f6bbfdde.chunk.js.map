{"version":3,"sources":["components/Footer.js","contexts/index.js","components/Header.js","components/Aside.js","components/Product.js","reducers/appReducer.js","Screens/HomeScreen.js","components/ShoppingAction.js","components/ProductDetail.js","Screens/ProductScreen.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","DispatchContext","createContext","StateContext","Header","dispatch","useContext","onClick","type","to","href","Aside","state","open","Product","product","src","image","alt","_id","name","brand","price","rating","numReviews","initialAppState","jsonData","appReducer","action","payload","HomeScreen","useReducer","useEffect","a","axios","get","data","fetchData","map","key","ShoppingAction","ProductDetail","props","ProductScreen","match","products","find","x","params","id","Main","path","component","exact","App","Provider","value","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6bbfdde.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Footer = () => {\n    return <footer className=\"footer\">All right reserved.</footer>;\n}\n\nexport default Footer;","import { createContext } from \"react\";\n\nconst DispatchContext = createContext();\nconst StateContext = createContext();\n\nexport { DispatchContext, StateContext }","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { DispatchContext } from \"../contexts\";\n\nconst Header = () => {\n    const dispatch = useContext(DispatchContext);\n\n    return (\n      <header className=\"header\">\n        <div className=\"brand\">\n          <button className=\"hideLarge\" onClick={() => dispatch({type: \"OPENASIDE\"})}>\n            &#9776;\n          </button>\n          <Link to=\"/\">amazona</Link>\n        </div>\n        <div className=\"header-links\">\n          <a href=\"cart.html\">Cart</a>\n          <a href=\"signin.html\">Sign In</a>\n        </div>\n      </header>\n    );\n}\n\nexport default Header;","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { StateContext, DispatchContext } from \"../contexts\";\n\nconst Aside = () => {\n  const dispatch = useContext(DispatchContext);\n  const state = useContext(StateContext);\n\n  return (\n    <aside className={`${state.open ? \"sidebar open\" : \"sidebar\"}`}>\n      <h3 className=\"sidebar-header\">Shopping Categories</h3>\n      <button\n        className=\"sidebar-close-button hideLarge\"\n        onClick={() => dispatch({type: \"CLOSEASIDE\"})}\n      >\n        x\n      </button>\n      <ul>\n        <li>\n          <Link to=\"index.html\">Pants</Link>\n        </li>\n\n        <li>\n          <Link to=\"index.html\">Shirts</Link>\n        </li>\n      </ul>\n    </aside>\n  );\n};\n\nexport default Aside;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Product = ({product}) => {\n   return (\n     <li>\n       <div className=\"product\">\n         <img className=\"product-image\" src={product.image} alt=\"product\" />\n         <div className=\"product-name\">\n           <Link to={\"/product/\" + product._id}>{product.name}</Link>\n         </div>\n         <div className=\"product-brand\">{product.brand}</div>\n         <div className=\"product-price\">${product.price}</div>\n         <div className=\"product-rating\">\n           {product.rating} Stars ({product.numReviews} Reviews)\n         </div>\n       </div>\n     </li>\n   );\n}\n\nexport default Product;","const initialAppState = {\n  open: false,\n  jsonData: [],\n};\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case \"OPENASIDE\":\n      return { ...state, open: true };\n    case \"CLOSEASIDE\":\n      return { ...state, open: false };\n    case \"SETJSONDATA\":\n      return { ...state, jsonData: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport { initialAppState, appReducer };","import React, { useReducer, useEffect } from 'react';\nimport axios from \"axios\";\n\nimport Product from \"../components/Product\";\nimport { initialAppState, appReducer } from \"../reducers/appReducer\"\n\nconst HomeScreen = () => {\n  const [state, dispatch] = useReducer(appReducer, initialAppState)\n\n  useEffect(() => {\n    async function fetchData() {\n      const { data } = await axios.get(\"/api/products\");\n      dispatch({ type: \"SETJSONDATA\", payload: data });\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <ul className=\"products\">\n      {state.jsonData.map((product) => (\n        <Product key={product._id} product={product} />\n      ))}\n    </ul>\n  );\n}\nexport default HomeScreen;","import React from \"react\";\n\nconst ShoppingAction = ({price}) => {\n   return (\n      <div className=\"details-action\">\n         <ul>\n            <li>Price: {price}</li>\n            <li>Status: </li>\n            <li>\n               Qty:{\" \"}\n               <select>\n                  <option>1</option>\n                  <option>2</option>\n                  <option>3</option>\n                  <option>4</option>\n               </select>\n            </li>\n            <li>\n               <button className=\"button primary\">Add to Cart</button>\n            </li>\n         </ul>\n      </div>\n\n   )\n}\n\nexport default ShoppingAction;","import React from \"react\";\n\nconst ProductDetail = (props) => {\n   const { product } = props;\n   return (\n      <>\n         <div className=\"details-image\">\n            <img src={product.image} alt=\"product\"></img>\n         </div>\n         <div className=\"details-info\">\n            <ul>\n               <li>\n                  <h4>{product.name}</h4>\n               </li>\n               <li>\n                  {product.rating} Stars ({product.numReviews} Reviews)\n            </li>\n               <li>\n                  Price: <b>${product.price}</b>\n               </li>\n               <li>\n                  Description:\n              <div></div>\n               </li>\n            </ul>\n         </div>\n\n      </>      \n   )\n}\n\nexport default ProductDetail;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport ShoppingAction from \"../components/ShoppingAction\";\nimport ProductDetail from \"../components/ProductDetail\";\nimport products from \"../json/data.json\";\n\nfunction ProductScreen({ match }) {\n  const product = products.find(\n    (x) => x._id === match.params.id\n  );\n  return (\n    <div>\n      <div className=\"back-to-result\">\n        <Link to=\"/\">Back to result</Link>\n      </div>\n      <div className=\"details\">\n        <ProductDetail product={product} />\n        <ShoppingAction price={product.price} />{\" \"}\n      </div>\n    </div>\n  );\n}\nexport default ProductScreen;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport HomeScreen from \"../Screens/HomeScreen\";\nimport ProductScreen from \"../Screens/ProductScreen\";\n\nconst Main = () => {\n   return (\n     <main className=\"main\">\n       <div className=\"content\">\n         <Switch>\n           <Route path=\"/product/:id\" component={ProductScreen} />\n           <Route path=\"/\" exact={true} component={HomeScreen} />\n         </Switch>\n       </div>\n     </main>\n   );\n}\n\nexport default Main;","import React, { useReducer, useEffect } from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Footer from \"./components/Footer\";\nimport Header from \"./components/Header\";\nimport Aside from \"./components/Aside\";\nimport Main from \"./components/Main\";\nimport './App.css';\n\nimport { StateContext, DispatchContext } from \"./contexts\"\nimport { initialAppState, appReducer } from \"./reducers/appReducer\"\n\nfunction App() {\n  const [state, dispatch] = useReducer(appReducer, initialAppState)\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        <BrowserRouter>\n          <div className=\"grid-container\">\n            <Header className=\"header\" />\n            <Aside className=\"sidebar\" />\n            <Main className=\"main\" />\n            <Footer className=\"footer\" />\n          </div>\n        </BrowserRouter>\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}